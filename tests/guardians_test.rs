use std::str::FromStr;

use clutch_wallet_lib::utils::guardians::{Guardian, GuardianProxyConfig};
use ethers::{
    prelude::rand::{self, Rng},
    types::{Address, Bytes, U256},
};
mod helpers;
use expectest::prelude::*;
use helpers::to_addresses;

use crate::helpers::guardian_factory_abi;

#[tokio::test]
async fn test_sort_addresses() {
    let singleton_factory_address = Address::from_low_u64_be(1);
    let guardian = Guardian::new(singleton_factory_address);

    let starting_order = vec![
        "0x535864266E1E0A26Ce83fafD28B1Db068e9e5E24",
        "0x9ED4ae8B6269dc647939d21f48dE87B84431d5b0",
        "0x8C86495bb7d23EDb52EdA33C5F46fc70f8dBF097",
        "0x845966Cd7eA64786e10D0E09a5fdD9DC44C2EFc3",
        "0xD3Bd2445B40E5F0ab14600902d68c64aAe0743f1",
        "0x912e7Cb5CDab12cBd669B7a7493A32269F733D9f",
        "0x65D7a54b711802E2eCD16AC00046357Fa271eE3d",
        "0x112c5B48B248F26007622eB5E5D9EB39dD719928",
        "0xA2b180B76cb3386ceDf3c830Ab224418a456F6D0",
        "0xF6166A6Cc3Fd3be46Bf87f41E4FcA447952C6ba4",
    ];

    let guardian_addresses = starting_order
        .iter()
        .map(|x| x.parse::<Address>().unwrap())
        .collect::<Vec<Address>>();
    let sorted = guardian.sort_addresses(guardian_addresses.clone()).await;

    let expected_order = vec![
        "0x112c5B48B248F26007622eB5E5D9EB39dD719928",
        "0x535864266E1E0A26Ce83fafD28B1Db068e9e5E24",
        "0x65D7a54b711802E2eCD16AC00046357Fa271eE3d",
        "0x845966Cd7eA64786e10D0E09a5fdD9DC44C2EFc3",
        "0x8C86495bb7d23EDb52EdA33C5F46fc70f8dBF097",
        "0x912e7Cb5CDab12cBd669B7a7493A32269F733D9f",
        "0x9ED4ae8B6269dc647939d21f48dE87B84431d5b0",
        "0xA2b180B76cb3386ceDf3c830Ab224418a456F6D0",
        "0xD3Bd2445B40E5F0ab14600902d68c64aAe0743f1",
        "0xF6166A6Cc3Fd3be46Bf87f41E4FcA447952C6ba4",
    ];

    let expected = expected_order
        .iter()
        .map(|x| x.parse::<Address>().unwrap())
        .collect::<Vec<Address>>();

    expect!(sorted).to(be_equal_to(expected));
}

#[tokio::test]
async fn test_get_initialize_data() {
    let singleton_factory_address = Address::zero();
    let guardian = Guardian::new(singleton_factory_address);
    let threshold = U256::from(5);

    let guardian_addresses = to_addresses(vec![
        "0x22B2eDD06D24d8E0e9834449C3167Cb67ff38418",
        "0x2E6Ba422081a50495CF38A026dBb1FFd3Da58Be7",
        "0x51146c8e39924D319772FaD2b89851214c942be5",
        "0x551796F8010a64e755806c8f0E55759760cB087a",
        "0x667d25BbC15348A697a4dDA710EB2C2bA8B79f15",
        "0x74a1949602a0a0bd84c1b178ddc8bD3caaCcEA73",
        "0x7D0336751d49d93d9A0a0727E770686Cf0bf7899",
        "0xa77Be7D4eec939c167e89e324c2EBc593f5333b7",
        "0xDf814112AF7081C92C705Ee30ABfceF9cc1b45C5",
        "0xeB6003a4FDC2fe05FA949F2C71C2FB881f8eB1Ca",
    ])
    .await;

    let initialize_data = guardian
        .get_initialize_data(guardian_addresses.clone(), threshold)
        .await
        .unwrap();

    let expected_data = String::from("0x1bd9097400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000022b2edd06d24d8e0e9834449c3167cb67ff384180000000000000000000000002e6ba422081a50495cf38a026dbb1ffd3da58be700000000000000000000000051146c8e39924d319772fad2b89851214c942be5000000000000000000000000551796f8010a64e755806c8f0e55759760cb087a000000000000000000000000667d25bbc15348a697a4dda710eb2c2ba8b79f1500000000000000000000000074a1949602a0a0bd84c1b178ddc8bd3caaccea730000000000000000000000007d0336751d49d93d9a0a0727e770686cf0bf7899000000000000000000000000a77be7d4eec939c167e89e324c2ebc593f5333b7000000000000000000000000df814112af7081c92c705ee30abfcef9cc1b45c5000000000000000000000000eb6003a4fdc2fe05fa949f2c71c2fb881f8eb1ca");
    let expected_data_bytes = hex::decode(&expected_data[2..]).unwrap();

    expect!(initialize_data).to(be_equal_to(expected_data_bytes));
}

#[tokio::test]
async fn test_get_guardian_code() {
    let singleton_factory_address = "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82"
        .parse::<Address>()
        .unwrap();
    let guardian = Guardian::new(singleton_factory_address);

    let guardian_addresses = to_addresses(vec![
        "0xF6b3177afa81827e9356Aac0F0A026E0CfA75615",
        "0xf5F459b4fFB93b79134eff1DA5737a0b612F13A9",
        "0xAFec06552FF7F4891a7080FCDACad763893A9e67",
        "0xb5395cbA9FA64627B618F480f1E15e264213907d",
        "0xc5be092A8E6599Dca425Aa0E53fae5336c366B60",
        "0xD60970Cf72Fb77BE71C97cFF01f2fE85A7d6A61c",
        "0x743B7C084cE296D62b5a6D777507d689b75ee71a",
        "0x5608EFe2cCDc91392bb903FbA50bC99C3C49E56B",
        "0x959607e9105973209696F55B28dc2D8E5F91328c",
        "0x1b2b5BE4617318E055FF7B355971b0e3d4083FBB",
    ])
    .await;

    let threshold = U256::from(5);

    // let project = compile_project();
    // let (abi, bytecode) = get_abi_and_bytecode(String::from("ClutchWalletProxy"), project);
    // let guardian_proxy_config = GuardianProxyConfig { abi, bytecode };

    let guardian_proxy_config = guardian_factory_abi();

    let guardian_code = guardian
        .get_guardian_code(
            singleton_factory_address,
            guardian_addresses,
            threshold,
            guardian_proxy_config,
        )
        .await
        .unwrap();

    let expected_code = String::from("0x60806040526103b480380380610014816100bd565b92833981016040828203126100a1578151916001600160a01b03831683036100a1576020810151906001600160401b0382116100a157019181601f840112156100a15782519261006b610066856100ef565b6100bd565b92848452602085830101116100a1576100939361008e9160208086019101610119565b61013c565b60405160bb90816102f98239f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176100e257604052565b6100ea6100a6565b604052565b6020906001600160401b03811161010c575b601f01601f19160190565b6101146100a6565b610101565b60005b83811061012c5750506000910152565b818101518382015260200161011c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81905561021f91906000906001600160a01b0381167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a26040519282908190606086016001600160401b0381118782101761022b575b604052602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020870152660819985a5b195960ca1b6040870152602081519101845af4903d15610222573d61020f610066826100ef565b908152809360203d92013e610284565b50565b60609250610284565b6102336100a6565b6101b5565b1561023f57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156102a75750815115610298575090565b6102a4903b1515610238565b90565b8251909150156102ba5750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526102ea8151809281602486015260208686019101610119565b601f01601f19168101030190fdfe608060405236156049577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f3fea26469706673582212208090d0af820f5b59d1da85476d8d46f49d4a89597f48aaa3b421c213ab65b52d64736f6c634300081100330000000000000000000000000dcd1bf9a1b36ce34237eeafef220932846bcd82000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a41bd9097400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000001b2b5be4617318e055ff7b355971b0e3d4083fbb0000000000000000000000005608efe2ccdc91392bb903fba50bc99c3c49e56b000000000000000000000000743b7c084ce296d62b5a6d777507d689b75ee71a000000000000000000000000959607e9105973209696f55b28dc2d8e5f91328c000000000000000000000000afec06552ff7f4891a7080fcdacad763893a9e67000000000000000000000000b5395cba9fa64627b618f480f1e15e264213907d000000000000000000000000c5be092a8e6599dca425aa0e53fae5336c366b60000000000000000000000000d60970cf72fb77be71c97cff01f2fe85a7d6a61c000000000000000000000000f5f459b4ffb93b79134eff1da5737a0b612f13a9000000000000000000000000f6b3177afa81827e9356aac0f0a026e0cfa7561500000000000000000000000000000000000000000000000000000000");
    expect!(guardian_code).to(be_equal_to(expected_code));
}

#[tokio::test]
async fn test_get_packed_init_code() {
    let singleton_factory_address = Address::zero();
    let guardian_factory_address = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
        .parse::<Address>()
        .unwrap();
    let guardian = Guardian::new(singleton_factory_address);

    let init_code = String::from("0x60806040526103b480380380610014816100bd565b92833981016040828203126100a1578151916001600160a01b03831683036100a1576020810151906001600160401b0382116100a157019181601f840112156100a15782519261006b610066856100ef565b6100bd565b92848452602085830101116100a1576100939361008e9160208086019101610119565b61013c565b60405160bb90816102f98239f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176100e257604052565b6100ea6100a6565b604052565b6020906001600160401b03811161010c575b601f01601f19160190565b6101146100a6565b610101565b60005b83811061012c5750506000910152565b818101518382015260200161011c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81905561021f91906000906001600160a01b0381167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a26040519282908190606086016001600160401b0381118782101761022b575b604052602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020870152660819985a5b195960ca1b6040870152602081519101845af4903d15610222573d61020f610066826100ef565b908152809360203d92013e610284565b50565b60609250610284565b6102336100a6565b6101b5565b1561023f57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156102a75750815115610298575090565b6102a4903b1515610238565b90565b8251909150156102ba5750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526102ea8151809281602486015260208686019101610119565b601f01601f19168101030190fdfe608060405236156049577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f3fea26469706673582212208090d0af820f5b59d1da85476d8d46f49d4a89597f48aaa3b421c213ab65b52d64736f6c634300081100330000000000000000000000000dcd1bf9a1b36ce34237eeafef220932846bcd82000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a41bd9097400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008219eaa1a0e2af32cd75804fae24cf0fdedf9010000000000000000000000000b496a7407c2f41b1bda67edc47caf34da8ba7b60000000000000000000000001e611d13dbca587195843d7394ffd693f74bda1800000000000000000000000067bd2c79008eadf59af0c2d51db6543210b2a26300000000000000000000000073b47a3af05c568bf9a48c7d2d2936e3687ef83200000000000000000000000099b4fa02176991bd30f2b7b4f08d0b3616db513b000000000000000000000000aafc160c0faa4dc928c16a2e88f3654fb17b57ed000000000000000000000000c952ead522844b5b3ae7c9335eab556e2dc95956000000000000000000000000d9f287e69ca4c4622737e82eae40b7083fe44bae000000000000000000000000e2e03bd3c648f9631ea88e07c6ba5e3ebe456c7300000000000000000000000000000000000000000000000000000000");
    let salt = "0xd8bea6654bec167e4a90277be0db2f930d9d12dfb51e035270d73a09e9b3c558";

    let init_code = hex::decode(&init_code[2..]).unwrap();
    let salt = hex::decode(&salt[2..]).unwrap();

    let packed_init_code = guardian
        .get_packed_init_code(guardian_factory_address, init_code, salt)
        .await
        .unwrap();

    let expected_packed_init_code = "0xe7f1725e7734ce288f8367e1bb143e90bb3f05124af63f020000000000000000000000000000000000000000000000000000000000000040d8bea6654bec167e4a90277be0db2f930d9d12dfb51e035270d73a09e9b3c55800000000000000000000000000000000000000000000000000000000000005d460806040526103b480380380610014816100bd565b92833981016040828203126100a1578151916001600160a01b03831683036100a1576020810151906001600160401b0382116100a157019181601f840112156100a15782519261006b610066856100ef565b6100bd565b92848452602085830101116100a1576100939361008e9160208086019101610119565b61013c565b60405160bb90816102f98239f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176100e257604052565b6100ea6100a6565b604052565b6020906001600160401b03811161010c575b601f01601f19160190565b6101146100a6565b610101565b60005b83811061012c5750506000910152565b818101518382015260200161011c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81905561021f91906000906001600160a01b0381167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a26040519282908190606086016001600160401b0381118782101761022b575b604052602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020870152660819985a5b195960ca1b6040870152602081519101845af4903d15610222573d61020f610066826100ef565b908152809360203d92013e610284565b50565b60609250610284565b6102336100a6565b6101b5565b1561023f57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156102a75750815115610298575090565b6102a4903b1515610238565b90565b8251909150156102ba5750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526102ea8151809281602486015260208686019101610119565b601f01601f19168101030190fdfe608060405236156049577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f3fea26469706673582212208090d0af820f5b59d1da85476d8d46f49d4a89597f48aaa3b421c213ab65b52d64736f6c634300081100330000000000000000000000000dcd1bf9a1b36ce34237eeafef220932846bcd82000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a41bd9097400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008219eaa1a0e2af32cd75804fae24cf0fdedf9010000000000000000000000000b496a7407c2f41b1bda67edc47caf34da8ba7b60000000000000000000000001e611d13dbca587195843d7394ffd693f74bda1800000000000000000000000067bd2c79008eadf59af0c2d51db6543210b2a26300000000000000000000000073b47a3af05c568bf9a48c7d2d2936e3687ef83200000000000000000000000099b4fa02176991bd30f2b7b4f08d0b3616db513b000000000000000000000000aafc160c0faa4dc928c16a2e88f3654fb17b57ed000000000000000000000000c952ead522844b5b3ae7c9335eab556e2dc95956000000000000000000000000d9f287e69ca4c4622737e82eae40b7083fe44bae000000000000000000000000e2e03bd3c648f9631ea88e07c6ba5e3ebe456c7300000000000000000000000000000000000000000000000000000000000000000000000000000000";
    let actual = String::from("0x") + hex::encode(packed_init_code).as_str();
    expect!(actual).to(be_equal_to(expected_packed_init_code));
}

#[tokio::test]
async fn test_calculate_guardian_and_init_code() {
    let singleton_factory_address = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
        .parse::<Address>()
        .unwrap();
    let guardian_factory_address = "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82"
        .parse::<Address>()
        .unwrap();
    let guardian = Guardian::new(singleton_factory_address);

    let string_salt = "d8bea6654bec167e4a90277be0db2f930d9d12dfb51e035270d73a09e9b3c558";
    let salt = hex::decode(string_salt).unwrap();

    let threshold = U256::from(5);

    let guardian_addresses = to_addresses(vec![
        "0x3BED5596CD3AA0b8b4801BcD578324e74160c098",
        "0xd77CD8F819eD6380916249Af499F061755800dD1",
        "0xf1F15Ca798c2A2f9A3f6f534f6D912a836CC5E1b",
        "0xc1946A484e47771D26B272F88810BF40BB911Fa3",
        "0xE6fe8B644D1992c02996836f78ce0C39b7C14B2d",
        "0xA12d423a5e790cF551a109cD562d423cD1ECa1D5",
        "0xA6Ec8ed7CE735b25BF848b5e97B7F3Af57121E3A",
        "0x93F4eC720E91a2a8b4086c9f6Ed8660F39b3BD3C",
        "0x109AB71B0F1E65850BEEd260cad767c06079C32a",
        "0x9728a6d90fE91Cc224f21b8fa3Ea272099aA4249",
    ])
    .await;

    let abi_json = r#"[
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "logic",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "data",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "payable",
                "type": "constructor"
            },
            {
                "stateMutability": "payable",
                "type": "fallback"
            },
            {
                "stateMutability": "payable",
                "type": "receive"
            }
        ]"#;

    let abi = serde_json::from_str::<ethers::abi::Contract>(&abi_json).unwrap();
    let bytecode = "0x60806040526103b480380380610014816100bd565b92833981016040828203126100a1578151916001600160a01b03831683036100a1576020810151906001600160401b0382116100a157019181601f840112156100a15782519261006b610066856100ef565b6100bd565b92848452602085830101116100a1576100939361008e9160208086019101610119565b61013c565b60405160bb90816102f98239f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176100e257604052565b6100ea6100a6565b604052565b6020906001600160401b03811161010c575b601f01601f19160190565b6101146100a6565b610101565b60005b83811061012c5750506000910152565b818101518382015260200161011c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81905561021f91906000906001600160a01b0381167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a26040519282908190606086016001600160401b0381118782101761022b575b604052602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020870152660819985a5b195960ca1b6040870152602081519101845af4903d15610222573d61020f610066826100ef565b908152809360203d92013e610284565b50565b60609250610284565b6102336100a6565b6101b5565b1561023f57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156102a75750815115610298575090565b6102a4903b1515610238565b90565b8251909150156102ba5750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526102ea8151809281602486015260208686019101610119565b601f01601f19168101030190fdfe608060405236156049577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f3fea26469706673582212208090d0af820f5b59d1da85476d8d46f49d4a89597f48aaa3b421c213ab65b52d64736f6c63430008110033";
    let bytecode = Bytes::from_str(bytecode).unwrap();

    let guardian_proxy_config = GuardianProxyConfig { abi, bytecode };

    let (calculated_address, init_code) = guardian
        .calculate_guardian_and_init_code(
            guardian_factory_address,
            guardian_addresses,
            threshold,
            salt,
            guardian_proxy_config,
        )
        .await
        .unwrap();

    let expected_address = "0x75eeb42f939a758723024200ee66d77d8f43e265"
        .parse::<Address>()
        .unwrap();
    let expected_init_code = hex::decode("e7f1725e7734ce288f8367e1bb143e90bb3f05124af63f020000000000000000000000000000000000000000000000000000000000000040d8bea6654bec167e4a90277be0db2f930d9d12dfb51e035270d73a09e9b3c55800000000000000000000000000000000000000000000000000000000000005d460806040526103b480380380610014816100bd565b92833981016040828203126100a1578151916001600160a01b03831683036100a1576020810151906001600160401b0382116100a157019181601f840112156100a15782519261006b610066856100ef565b6100bd565b92848452602085830101116100a1576100939361008e9160208086019101610119565b61013c565b60405160bb90816102f98239f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176100e257604052565b6100ea6100a6565b604052565b6020906001600160401b03811161010c575b601f01601f19160190565b6101146100a6565b610101565b60005b83811061012c5750506000910152565b818101518382015260200161011c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81905561021f91906000906001600160a01b0381167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a26040519282908190606086016001600160401b0381118782101761022b575b604052602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020870152660819985a5b195960ca1b6040870152602081519101845af4903d15610222573d61020f610066826100ef565b908152809360203d92013e610284565b50565b60609250610284565b6102336100a6565b6101b5565b1561023f57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156102a75750815115610298575090565b6102a4903b1515610238565b90565b8251909150156102ba5750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526102ea8151809281602486015260208686019101610119565b601f01601f19168101030190fdfe608060405236156049577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546000808092368280378136915af43d82803e156045573d90f3fea26469706673582212208090d0af820f5b59d1da85476d8d46f49d4a89597f48aaa3b421c213ab65b52d64736f6c634300081100330000000000000000000000000dcd1bf9a1b36ce34237eeafef220932846bcd82000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a41bd9097400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000109ab71b0f1e65850beed260cad767c06079c32a0000000000000000000000003bed5596cd3aa0b8b4801bcd578324e74160c09800000000000000000000000093f4ec720e91a2a8b4086c9f6ed8660f39b3bd3c0000000000000000000000009728a6d90fe91cc224f21b8fa3ea272099aa4249000000000000000000000000a12d423a5e790cf551a109cd562d423cd1eca1d5000000000000000000000000a6ec8ed7ce735b25bf848b5e97b7f3af57121e3a000000000000000000000000c1946a484e47771d26b272f88810bf40bb911fa3000000000000000000000000d77cd8f819ed6380916249af499f061755800dd1000000000000000000000000e6fe8b644d1992c02996836f78ce0c39b7c14b2d000000000000000000000000f1f15ca798c2a2f9a3f6f534f6d912a836cc5e1b00000000000000000000000000000000000000000000000000000000000000000000000000000000").unwrap();

    expect!(calculated_address).to(be_equal_to(expected_address));
    expect!(init_code).to(be_equal_to(expected_init_code));
}

#[allow(dead_code)]
fn generate_bytes32_salt() -> [u8; 32] {
    let mut rng = rand::thread_rng();
    let mut salt = [0u8; 32];
    rng.fill(&mut salt);
    salt
}
